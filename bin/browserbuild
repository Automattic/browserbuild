#!/usr/bin/env node

var program = require('commander')
  , path = require('path')
  , fs = require('fs')
  , pwd = process.cwd()
  , debug = require('debug')('browserbuild')

// reads a client-side file

function read (file) {
  return fs.readFileSync(file, 'utf8')
}

// source for client-side require

var source = read(__dirname + '/../lib/require.js')
  .replace(/\/*([^/]+)\/\n/g, '')
  .replace(/\n/g, '')
  .replace(/ +/g, ' ')

// program

program
  .version(require('../package').version)
  .usage('[options] <file â€¦>')
  .option('-g, --global [name]', 'Name of the global to export.')
  .option('-b, --basepath [name]', 'Base path of supplied files ['+ pwd + '].', pwd)
  .option('-m, --main <name>', 'Name of the main file/module to export.')
  .option('-d, --debug', 'Includes visionmedia/debug for a dev build.')
  .parse(process.argv)

// validate

if (!program.main) {
  console.error('\n  Please supply a `main` option\n');
  return;
}

if (!program.args.length) {
  console.error('\n  Please supply files.\n');
  return;
}

// process argument

var target = program.args
  , mod = path.basename(program.main)

function handle (filepath) {
  var stat = fs.statSync(filepath);

  if (stat.isDirectory()) {
    var files = fs.readdirSync(filepath);

    files.forEach(function (f) {
      handle(path + '/' + f);
    });
  } else {
    var base = program.basepath
      , source = fs.readFileSync(filepath, 'utf8')

    if (base && base == filepath.substr(0, base.length)) {
      filepath = filepath.substr(base.length);
    }

    // remove `if node`
    var ignoring = false

    source = source.split('\n').map(function (line, i) {
      if (ignoring) {
        if (/^ *\/\/ *end/.test(line)) {
          ignoring = false;
        }
        return '';
      } else {
        if (/^ *\/\/ *if *node/.test(line)) {
          debug('[%s] skipping node-only code at line %d'
            , path.basename(filepath), i + 1);
          ignoring = true;
          return '';
        } else {
          return line;
        }
      }
    }).join('\n');

    // wrap
    data += 'require.register("' + filepath + '", '
      + 'function(module, exports, require, global){\n' + source + '\n});';
  }
};

// debug
var debugCode;
if (program.debug) {
  debugCode = read(__dirname + '/../node_modules/debug/debug.js');
} else {
  debugCode = 'function debug(){return debug};';
}

// head
var data = '(function(){'
  + 'var global = this;'
  + debugCode
  + source

// handle files
program.args.forEach(handle);

// tail
data += (program.global || program.main) + ' = require(\'' + mod + '\');\n';
data += '})();';

console.log(data);
